# ====================================
#  Web UI 前端服务的 Nginx 配置
# ====================================

# 主要功能:
#   1. 配置域名和SSL证书
#   2. HTTP 自动跳转 HTTPS  
#   3. 负载均衡转发到后端服务
#   4. 安全相关配置(SSL/TLS)
# ====================================

# 定义缓存区域 - 修改缓存配置
proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=airflow_cache:20m max_size=10g 
                 inactive=60m use_temp_path=off;

# 添加全局连接参数
client_max_body_size 50m;
client_body_buffer_size 16k;

# 限制每个IP的连接数 - 防止单一客户端占用过多资源
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn conn_limit_per_ip 20;
limit_conn_status 429;

# 定义后端服务器组
upstream web_backend {
    server 10.1.12.7:3000 max_fails=3 fail_timeout=30s;
    # 可以添加更多服务器节点(内网IP)
    # server 10.1.12.8:3000;
    # server 10.1.12.9:3000;
    
    # 负载均衡算法配置（可选）
    # least_conn; # 最少连接数优先
    # ip_hash;    # 按IP进行哈希，保证同一用户请求到同一服务器
    # hash $request_uri; # 按URI哈希
    
    keepalive 64; # 增加保持连接池大小
    keepalive_timeout 65; # 保持连接的超时时间
    keepalive_requests 1000; # 每个保持连接的请求数量上限
}

# 定义后端服务器组
upstream airflow_backend {
    server 10.1.20.3:80;
}

# 重定向到HTTPS
server {
    listen 80;
    server_name _;

    # 将所有HTTP请求重定向到HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
    
    # 健康检查
    location /health {
        return 200 "healthy\n";
    }
}

# 代理到后端服务
server {
    listen 443 ssl;
    server_name _;

    # SSL证书配置
    ssl_certificate /etc/letsencrypt/live/lucyai.sale/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/lucyai.sale/privkey.pem;
    
    # 优化SSL配置 - 支持更多的密码套件
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    
    # 增强SSL会话缓存
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_buffer_size 16k; # 增加缓冲区大小
    
    # 优化重用SSL会话
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # HSTS配置 (HTTP严格传输安全)
    # add_header Strict-Transport-Security "max-age=63072000" always;
    
    # 健康检查端点
    location /health {
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # 代理到后端服务
    location / {
        proxy_pass http://web_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 优化 WebSocket 支持
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # 增加超时设置
        proxy_connect_timeout 180s;  # 增加连接超时
        proxy_read_timeout 600s;     # 增加读取超时
        proxy_send_timeout 180s;     # 增加发送超时
        
        # 缓冲区设置
        proxy_buffering on;
        proxy_buffer_size 32k;       # 增加缓冲区大小
        proxy_buffers 8 32k;         # 增加缓冲区数量
        proxy_busy_buffers_size 128k; # 增加繁忙缓冲区大小
        
        # 错误处理
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_intercept_errors on;    # 拦截后端错误
        
        # 添加缓存状态头
        add_header X-Cache-Status $upstream_cache_status;
        
        # 添加错误页面
        # proxy_intercept_errors on;
        # error_page 500 502 503 504 /50x.html;
    }
    
    # 代理到airflow
    location /airflow/ {
        # 添加对OPTIONS请求的处理（preflight请求支持）
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # 增加CORS支持 - 防止头部重复添加，使用变量检测是否已经有后端头部
        proxy_hide_header 'Access-Control-Allow-Origin';
        proxy_hide_header 'Access-Control-Allow-Methods';
        proxy_hide_header 'Access-Control-Allow-Headers';
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
        
        proxy_pass http://airflow_backend;
        
        # 优化连接参数 - 进一步调整
        proxy_connect_timeout 300s;    # 增加连接超时
        proxy_read_timeout 900s;       # 显著增加读取超时
        proxy_send_timeout 300s;       # 增加发送超时
        
        # 增加缓冲区设置 - 更大的缓冲区
        proxy_buffering on;
        proxy_buffer_size 64k;         # 更大的缓冲区
        proxy_buffers 16 32k;          # 更多的缓冲区
        proxy_busy_buffers_size 256k;  # 更大的繁忙缓冲区
        proxy_temp_file_write_size 256k; # 临时文件写入大小
        
        # 缓存配置优化
        proxy_cache airflow_cache;
        proxy_cache_methods GET HEAD POST;  # 缓存更多方法
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504; # 使用stale更新
        proxy_cache_valid 200 302 10m;    # 减少缓存时间为10分钟
        proxy_cache_valid 404 1m;         # 缓存404更短时间
        proxy_cache_key $host$request_uri$cookie_jessionid; # 更精确的缓存键
        proxy_cache_lock on;
        proxy_cache_lock_timeout 5s;      # 缓存锁超时设置
        proxy_cache_background_update on; # 后台更新缓存
        
        # 添加缓存状态头
        add_header X-Cache-Status $upstream_cache_status;
        
        # 设置基本的代理头
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 启用错误处理 - 优化错误处理
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
        
        # 禁用请求体缓存以防止大请求问题
        proxy_request_buffering off;
        
        # 针对包含msg_count的变量请求 - 禁用缓存
        location ~ ^/airflow/api/v1/variables/[^/]+_msg_count {
            # 添加对OPTIONS请求的处理（preflight请求支持）
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # 隐藏后端头部，避免CORS头部重复
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
            
            # 禁用此处的CORS头部添加，由父级location处理
            # add_header 'Access-Control-Allow-Origin' '*' always;
            # add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH' always;
            # add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
            
            proxy_pass http://airflow_backend;
            
            # 禁用缓存和缓冲
            proxy_cache off;
            proxy_buffering off;
            
            # 优化连接参数
            proxy_connect_timeout 180s;
            proxy_read_timeout 600s;
            proxy_send_timeout 180s;
            
            # 设置基本的代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 增加keepalive支持
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # 针对其他 API 变量接口的缓存规则
        location ~ ^/airflow/api/v1/variables/ {
            # 添加对OPTIONS请求的处理（preflight请求支持）
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # 隐藏后端头部，避免CORS头部重复
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
            
            # 禁用此处的CORS头部添加，由父级location处理
            # add_header 'Access-Control-Allow-Origin' '*' always;
            # add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH' always;
            # add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
            
            proxy_pass http://airflow_backend;
            proxy_cache airflow_cache;
            proxy_cache_valid 200 1m;  # 仅缓存1分钟
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            proxy_cache_key $request_uri;
            add_header X-Cache-Status $upstream_cache_status;
            
            # 优化连接参数
            proxy_connect_timeout 180s;
            proxy_read_timeout 600s;
            proxy_send_timeout 180s;
            
            # 设置基本的代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# 添加静态资源缓存规则
location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
    expires 7d;
    add_header Cache-Control "public, no-transform";
    add_header X-Asset-ID $request_uri;
    try_files $uri @backend;
}

location @backend {
    proxy_pass http://web_backend;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

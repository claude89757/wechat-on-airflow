user root;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # 初始化Lua环境，加载resty.core模块
    init_by_lua_block {
        require "resty.core"
    }

    # 增强的日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for" '
                     'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

    # 详细的JSON格式日志，方便后续分析处理
    log_format json_combined escape=json '{'
        '"timestamp":"$time_iso8601",'
        '"client":"$remote_addr",'
        '"method":"$request_method",'
        '"uri":"$request_uri",'
        '"status":$status,'
        '"request_time":$request_time,'
        '"upstream_response_time":"$upstream_response_time",'
        '"body_bytes_sent":$body_bytes_sent,'
        '"http_referer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"http_x_forwarded_for":"$http_x_forwarded_for",'
        '"server_name":"$server_name",'
        '"request_id":"$request_id"'
    '}';

    # 重定向日志到标准输出/标准错误，使其通过docker logs可见
    access_log  /dev/stdout  json_combined;
    error_log   /dev/stderr  warn;

    # Lua相关配置
    lua_socket_log_errors off;
    lua_check_client_abort on;
    lua_socket_connect_timeout 60s;
    lua_socket_send_timeout 60s;
    lua_socket_read_timeout 60s;
    
    # Shell命令执行配置
    lua_shared_dict shell_result 10m;
    
    # 配置shell命令执行 - 同时包含两个必要的路径
    lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/nginx/lua/?.lua;;";
    lua_package_cpath "/usr/local/openresty/lualib/?.so;;";
    
    # 包含其他配置文件
    include /etc/nginx/conf.d/*.conf;
} 
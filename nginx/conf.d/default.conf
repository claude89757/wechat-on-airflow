# 定义 upstream 服务组
upstream web_ui_backend {
    server ${WEB_UI_URL};
    keepalive 16;
}

upstream airflow_backend {
    server ${AIRFLOW_BASE_URL}; # 使用实际的 Airflow 地址
    keepalive 16;
}

upstream dify_backend {
    server ${DIFY_URL};
    keepalive 16;
}


# 主服务器配置
server {
    # 指定Nginx监听的端口，这里是标准HTTP端口80
    listen 80;
    # server_name设置为下划线，表示接受所有域名的请求
    # 相当于一个默认的虚拟主机配置
    server_name _;
        
    # 微信回调处理
    location = /wcf_callback {
        # 只允许POST请求
        if ($request_method !~ ^(POST)$) {
            return 405;
        }
        
        # 设置响应的内容类型为JSON
        default_type application/json;
        
        # 使用Lua脚本处理微信回调请求
        # 这个脚本可能会解析微信发送的数据，然后触发Airflow DAG运行
        content_by_lua_file /usr/local/openresty/nginx/lua/wcf_callback.lua;
    }
    
    # Airflow 代理 - 带路径重写
    location /airflow {
        include /etc/nginx/conf.d/proxy_settings.conf;
        
        # 重写路径，去掉 /airflow 前缀
        rewrite ^/airflow/(.*)$ /$1 break;
        
        # 修改 Airflow 返回的重定向
        proxy_redirect / /airflow/;
        proxy_redirect http://$host/ http://$host/airflow/;
        proxy_redirect https://$host/ https://$host/airflow/;
        
        # 设置子请求的URI，确保所有生成的链接都有前缀
        proxy_set_header X-Script-Name /airflow;
        # 如果使用反向代理，确保Airflow知道正确的协议
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 传递到 Airflow 后端
        proxy_pass http://airflow_backend;
    }
    
    # Dify Web UI代理
    location /dify {
        # 引入通用代理设置
        include /etc/nginx/conf.d/proxy_settings.conf;
        
        # 代理到Dify Web服务，使用upstream定义的服务组
        proxy_pass http://dify_backend;
    }
    
    # Web UI代理
    location / {
        # 引入通用代理设置
        include /etc/nginx/conf.d/proxy_settings.conf;
        
        # 代理到Web UI服务，使用upstream定义的服务组    
        proxy_pass http://web_ui_backend;
    }

    # 健康检查端点
    # 用于监控系统检查Nginx服务是否正常运行
    location = /health {
        # 设置响应的内容类型为纯文本
        default_type text/plain;
        # 直接返回200状态码和"OK"文本，表示服务正常
        return 200 "OK";
    }
} 